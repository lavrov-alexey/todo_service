{  # Запрос всех проектов с указанными полями
  allProjects {
    id
    name
    isDeleted
  }
}
##########################################################
{  # запрос всех проектов с указанными полями, в т.ч. с вложенными заметками по проектам
  allProjects {
    id
    name
    todoSet {
      id
      todoText
    }
    isDeleted
  }
}
##########################################################
{  # запрос всех проектов с указанными полями в т.ч. из вложенных объектов проектов
allTodo {
    id
    project {
      id
      name
    }
    todoText
    isActive
    isDeleted
  }
}
##########################################################
{  # запрос и проектов и заметок с определенными полями (в т.ч. вложенных объектов) в одном запросе
  allProjects {
    id
    name
    todoSet {
      id
      todoText
    }
    isDeleted
  }

  allTodo {
    id
    project {
      id
      name
    }
    todoText
    isActive
    isDeleted
  }
}
##########################################################
{  # запрос конкретного проекта по его id с выбранными полями (в т.ч. перечнем допущ. пользователей)
  getProjectById(pk: 2) {
    id
    name
    users {
      username
    }
  }
}
##########################################################
# запрос по конкретному пользователю с получением сразу по нему списков его заметок и проектов, куда он допущен
# для связей 1 ко многим и многие ко многим - в django по-умолчанию создается такое поле SomenameSet
{
  getUserById(pk: 2) {
    id
    username
    # для конкретного пользователя можем сразу получить список его заметок с нужн. полями
    todoSet{
      id
      todoText
      creator {
        id
        username
      }
    }
 	# а также все проекты, куда этот пользователь допущен
    projectSet {
      id
      name
      todoSet {
        todoText
      }
    }
  }
}
##########################################################
# запрос на фильтрацию пользователей по имени и/или фамилии
{
  getUserByName(firstName:"Имя", lastName: "Фамилия") {
    firstName
    lastName
    username
  }
}
##########################################################
mutation {  # запрос на создание проекта
  createProject(name: "TestProject-GQL", repoLink: "TestLink", isDeleted: false)
#   пишем какие поля из возвращаемого объекта нам вернуть
  {
    project {
      id
      name
    }
  }
}
##########################################################
mutation {   # запрос на обновление наименования ранее созданного проекта
  updateProject(pk:5, name: "Updated TestProject-GQL")
#   пишем какие поля из возвращаемого объекта нам вернуть
  {
    project {
      id
      name
    }
  }
}